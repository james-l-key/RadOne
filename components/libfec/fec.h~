// User include file for libfec
// Copyright 2004, 2014 Phil Karn, KA9Q
// May be used under the terms of the GNU Lesser General Public License (LGPL)

#ifndef _FEC_H_
#define _FEC_H_

// r=1/2 k=7 convolutional encoder polynomials
// The NASA-DSN convention is to use V27POLYA inverted, then V27POLYB
// The CCSDS/NASA-GSFC convention is to use V27POLYB, then V27POLYA inverted
#define	V27POLYA	0x6d
#define	V27POLYB	0x4f

void *create_viterbi27(int len);
int init_viterbi27(void *vp,int starting_state);
int update_viterbi27_blk(void *vp,unsigned char sym[],int npairs);
int chainback_viterbi27(void *vp, unsigned char *data,unsigned int nbits,unsigned int endstate);
void delete_viterbi27(void *vp);

// r=1/2 k=9 convolutional encoder polynomials
#define	V29POLYA	0x1af
#define	V29POLYB	0x11d

void *create_viterbi29(int len);
int init_viterbi29(void *vp,int starting_state);
int update_viterbi29_blk(void *vp,unsigned char syms[],int nbits);
int chainback_viterbi29(void *vp, unsigned char *data,unsigned int nbits,unsigned int endstate);
void delete_viterbi29(void *vp);

// r=1/3 k=9 convolutional encoder polynomials
#define	V39POLYA	0x1ed
#define	V39POLYB	0x19b
#define	V39POLYC	0x127

void *create_viterbi39(int len);
int init_viterbi39(void *vp,int starting_state);
int update_viterbi39_blk(void *vp,unsigned char syms[],int nbits);
int chainback_viterbi39(void *vp, unsigned char *data,unsigned int nbits,unsigned int endstate);
void delete_viterbi39(void *vp);

// r=1/6 k=15 Cassini convolutional encoder polynomials without symbol inversion
// dfree = 56
// These bits may be left-right flipped from some textbook representations;
// here I have the bits entering the shift register from the right (low) end

// Some other spacecraft use the same code, but with the polynomials in a different order.
// E.g., Mars Pathfinder and STEREO swap POLYC and POLYD. All use alternate symbol inversion.
#define	V615POLYA	042631
#define	V615POLYB	047245
#define V615POLYC       056507
#define V615POLYD       073363
#define V615POLYE       077267
#define V615POLYF       064537

void *create_viterbi615(int len);
int init_viterbi615(void *vp,int starting_state);
int update_viterbi615_blk(void *vp,unsigned char *syms,int nbits);
int chainback_viterbi615(void *vp, unsigned char *data,unsigned int nbits,unsigned int endstate);
void delete_viterbi615(void *vp);

// r=1/2 k=24 MCQLI-24 r=1/2 k=24 convolutional code for ISEE-3/ICE, launched 1978
// Obviously this code was originally intended for sequential decoding, but here's
// a monster Viterbi decoder for this code!
// The ref gives the polynomials as 073353367 and 053353367 (octal)
// Shortened from MCQLI-48
#define V224POLY1   073665667
#define V224POLY2   073665665
#define G1FLIP  0
#define G2FLIP  1           // Invert the second symbol

void *create_viterbi224(int len);
int init_viterbi224(void *p,int starting_state);
int update_viterbi224_blk(void *p,const unsigned char *syms,int nbits);
int chainback_viterbi224(void *p,unsigned char *data,unsigned int nbits,unsigned int endstate);
void delete_viterbi224(void *p);

// General purpose RS codec, 8-bit symbols
void encode_rs_char(void *rs,unsigned char *data,unsigned char *parity);
int decode_rs_char(void *rs,unsigned char *data,int *eras_pos,
		   int no_eras);
void *init_rs_char(int symsize,int gfpoly,
		   int fcr,int prim,int nroots,
		   int pad);
void free_rs_char(void *rs);

// General purpose RS codec, integer symbols
void encode_rs_int(void *rs,int *data,int *parity);
int decode_rs_int(void *rs,int *data,int *eras_pos,int no_eras);
void *init_rs_int(int symsize,int gfpoly,int fcr,
		  int prim,int nroots,int pad);
void free_rs_int(void *rs);

// CCSDS standard (255,223) RS codec with conventional (*not* dual-basis) representation
void encode_rs_8(unsigned char *data,unsigned char *parity,int pad);
int decode_rs_8(unsigned char *data,int *eras_pos,int no_eras,int pad);

// CCSDS standard (255,223) RS codec with dual-basis symbol representation
void encode_rs_ccsds(unsigned char *data,unsigned char *parity,int pad);
int decode_rs_ccsds(unsigned char *data,int *eras_pos,int no_eras,int pad);

// Tables to map from conventional->dual (Taltab) and dual->conventional (Tal1tab) bases
extern unsigned char Taltab[],Tal1tab[];

#endif /* _FEC_H_ */



